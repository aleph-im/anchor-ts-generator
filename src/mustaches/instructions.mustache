/*********************************************
 | Type file generated with anchor-generator |
 *********************************************/

import BN from "bn.js"
import { PublicKey } from "@solana/web3.js"
import { EventBase } from '@aleph-indexer/core'
import {
{{#typeImports}}
  {{.}},
{{/typeImports}}
} from "../solita/index.js";

import {
{{#beetImports}}
  {{.}},
{{/beetImports}}
} from '../solita/index.js';

// ------------------- INSTRUCTION TYPE -------------------
{{#eventTypeEnum}}
export enum {{name}} {
{{#variants}}
  {{.}} = '{{.}}',
{{/variants}}
}
{{/eventTypeEnum}}

export type InstructionBase = EventBase<InstructionType>

// ------------------- INSTRUCTIONS -------------------
{{#instructions}}
export type {{name}}Info = {
{{#data.fields}}
  {{name}}{{#optional}}?{{/optional}}: {{type}}{{#multiple}}[]{{/multiple}}
{{/data.fields}}
  accounts: {
{{#accounts}}
    {{name}}Account{{#multiple}}s{{/multiple}}: string{{#multiple}}[]{{/multiple}}
{{/accounts}}
  }
}

export type {{name}}Instruction = InstructionBase &
  {{name}}Info & {
    type: InstructionType.{{name}}
  }

{{/instructions}}

// ------------------- DATA LAYOUT -------------------
export const IX_DATA_LAYOUT: Partial<Record<{{eventTypeEnum.name}}, any>> = {
{{#instructions}}
  [{{eventTypeEnum.name}}.{{name}}]: {{beet}},
{{/instructions}}
}

// ------------------- ACCOUNT LAYOUT -------------------
export const IX_ACCOUNTS_LAYOUT: Partial<Record<{{eventTypeEnum.name}}, any>> = {
{{#instructions}}
  [{{eventTypeEnum.name}}.{{name}}]: [
  {{#accounts}}
    {{#multiple}}[{{/multiple}}'{{name}}'{{#multiple}}]{{/multiple}},
  {{/accounts}}
  ],
{{/instructions}}
}

export type ParsedInstruction =
{{#instructions}}
  {{name}}Instruction |
{{/instructions}}
